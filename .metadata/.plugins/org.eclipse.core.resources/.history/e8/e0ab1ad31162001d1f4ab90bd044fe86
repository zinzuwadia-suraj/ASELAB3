/**
 * 
 * This code is for calculating trigonometric functions such as sin, cos, and tan
 * using taylor series.
 * @author ASE Lab - 3
 * Suraj Zinzuwadia 	( 110091920 )
 * 
 */
package ASELAB4;

public class LibraryforTrigonometry {
	public static final double PI = 3.141592; //Value of PI
	
	/** 
	 * Converting degree to radian
	 * @param degree: double degree
	 * @return will return radian value of degree
	*/
	public static double degreeToRadian(double degree)
	{
		return (degree * PI)/ 180 ;
	}

	
	/** 
	 * normalize the Radian between 0 to 2PI
	 * @param radian: double radian
	 * @return will return normalized radian
	*/
	public static double normalizeRadian(double radian)
	{
		return radian % (PI*2);
	}

	
	/** 
	 * Converting radian to degree
	 * @param radian: double radian
	 * @return will return normalized degree
	*/	
	public static double radianToDegree(double radian) 
	{
		return (radian * 180)/ PI;
	}
	

	/**
	 * sin function for finding sin(x)
	 * @param angle
	 * @return returns generated value
	 */
	public static double sin(double angle) throws Exception
	{
		double sin=0;
		double normmalizedAngle = normalizeRadian(angle); //  x between [-2*PI ,2*PI]
		for(int i=0;i<=7;i++)
		{
			sin = sin + (power(-1, i)* power(normmalizedAngle,2*i+1 )/fact(2*i+1));
		}
		return sin;
	}

	
	/**
	 * cos function for finding cos(x)
	 * @param angle
	 * @return returns generated value
	 */	
	public static double cos(double angle) throws Exception
	{
		double cos=0;
		double normmalizedAngle = normalizeRadian(angle);// this makes sure that x is a value between -2*PI and 2*PI
				
		for(int i=0;i<=7;i++)
		{	
			cos = cos + (power(-1, i)*power(normmalizedAngle, 2*i)/fact(2*i));
		}
		
		return cos;
	}
	

	/**
	 * tan function for finding tan(x)
	 * @param angle
	 * @return returns generated value
	 */
	public static double tan(double angle) throws Exception
	{
		double tan=0;
		
		tan = sin(angle) / cos (angle);
		
		return tan;
	}
	
	
	/**
	 * This function is used for finding Factorial of n
	 * @param a For finding the factorial of a
	 * @return it will return value in long
	 */
	public static long fact(double n)
	{
		long m=1;
		
		if(n>=0)
		{
			for(int i=1;i<=n;i++)
			{
				m=m*i;
				
			}
		}
		
		return m;
	}
		
	/**
	 * This function is for finding power of any value.
	 * @param x This is base.
	 * @param y This is power.
	 * @return Returns value in double
	 */
	public static double power(double b, double p) throws Exception
	{
		double m=1;
		
		if(p == 0)
			return m;
		
		if(p<0)
			throw new Exception("Invalid power value entered");

		
		while(p!=0)
		{
			m = m * b;
			p--;
		}		
		
		return m;
		
	}

}
